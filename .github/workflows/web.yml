name: Web CI/CD

# Trigger workflow on push/PR to main/develop for web app changes
on:
  push:
    branches: [main, develop]
    paths:
      - 'src/web/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/web/**'

# Environment variables used across jobs
env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  NODE_VERSION: '18.17'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Lint and test job
  lint-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/web/yarn.lock

      - name: Install dependencies
        working-directory: src/web
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        working-directory: src/web
        run: yarn lint
        
      - name: Run type checking
        working-directory: src/web
        run: yarn typecheck

      - name: Run unit tests
        working-directory: src/web
        run: yarn test:ci
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: src/web/coverage
          retention-days: 14

  # Build and security scan job
  build-scan:
    name: Build and Security Scan
    needs: lint-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY }}/web
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=ref,event=tag

      - name: Build and cache image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          file: src/web/Dockerfile
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

      - name: Run Snyk container scan
        uses: snyk/actions/docker@v0.4.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }}
          args: --severity-threshold=high

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Production deployment with canary
  deploy:
    name: Deploy to Production
    needs: build-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_deploy

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Deploy canary
        run: |
          kubectl set image deployment/web-canary web=${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }} -n production
          kubectl scale deployment web-canary --replicas=2 -n production
          kubectl rollout status deployment/web-canary -n production --timeout=300s

      - name: Verify canary health
        run: |
          # Wait for canary pods to be ready
          sleep 30
          # Check if error rate is below threshold
          if [[ $(kubectl get prometheus -n monitoring web-error-rate -o jsonpath='{.status.value}') > 0.1 ]]; then
            kubectl scale deployment web-canary --replicas=0 -n production
            exit 1
          fi

      - name: Scale canary to 50%
        run: |
          kubectl scale deployment web-canary --replicas=5 -n production
          kubectl rollout status deployment/web-canary -n production --timeout=300s

      - name: Complete rollout
        run: |
          kubectl set image deployment/web web=${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }} -n production
          kubectl rollout status deployment/web -n production --timeout=300s
          kubectl scale deployment web-canary --replicas=0 -n production

      - name: Rollback on failure
        if: failure()
        run: |
          kubectl rollout undo deployment/web -n production
          kubectl scale deployment web-canary --replicas=0 -n production