# Grafana Helm Chart Values
# Version: 9.5.x

# Deployment replicas
replicas: 2

# Container image configuration
image:
  repository: grafana/grafana
  tag: 9.5.x
  pullPolicy: IfNotPresent

# Security context for pod/container
securityContext:
  runAsUser: 472
  runAsGroup: 472
  fsGroup: 472
  fsGroupChangePolicy: OnRootMismatch
  seccompProfile:
    type: RuntimeDefault

# Service account configuration
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::${AWS_ACCOUNT}:role/grafana-role
  automountServiceAccountToken: true

# Persistence configuration
persistence:
  enabled: true
  size: 10Gi
  storageClass: gp3
  annotations:
    backup.velero.io/backup-volumes: grafana-storage

# Resource requests and limits
resources:
  requests:
    cpu: 200m
    memory: 256Mi
  limits:
    cpu: 1000m
    memory: 1Gi

# Ingress configuration
ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
  hosts:
    - grafana.ai-travel-platform.com
  tls:
    - secretName: grafana-tls
      hosts:
        - grafana.ai-travel-platform.com

# Data sources configuration
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: 15s
          queryTimeout: 30s
          httpMethod: POST
      - name: Elasticsearch
        type: elasticsearch
        url: http://elasticsearch:9200
        access: proxy
        database: "[ai-travel-platform-]YYYY.MM.DD"
        jsonData:
          esVersion: 8.7.x
          timeField: "@timestamp"
          interval: Daily
          logMessageField: message
          logLevelField: level
          maxConcurrentShardRequests: 5

# Dashboard providers configuration
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards

# Default dashboards
dashboards:
  default:
    api-gateway:
      json: ./dashboards/api-gateway.json

# SMTP configuration
smtp:
  enabled: true
  host: smtp.sendgrid.net:587
  user: ${SMTP_USER}
  password: ${SMTP_PASSWORD}
  fromAddress: monitoring@ai-travel-platform.com
  fromName: AI Travel Platform Monitoring
  startTLS:
    enable: true

# Environment variables
env:
  GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
  GF_SECURITY_ALLOW_EMBEDDING: "false"
  GF_SECURITY_COOKIE_SECURE: "true"
  GF_SECURITY_DISABLE_GRAVATAR: "true"
  GF_SERVER_ROOT_URL: https://grafana.ai-travel-platform.com
  GF_SERVER_PROTOCOL: https
  GF_AUTH_GENERIC_OAUTH_ENABLED: "true"
  GF_AUTH_GENERIC_OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
  GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
  GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://auth.ai-travel-platform.com/authorize
  GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://auth.ai-travel-platform.com/oauth/token
  GF_AUTH_GENERIC_OAUTH_API_URL: https://auth.ai-travel-platform.com/userinfo
  GF_AUTH_GENERIC_OAUTH_SCOPES: openid profile email
  GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH: "contains(groups[*], 'grafana_admin') && 'Admin' || contains(groups[*], 'grafana_editor') && 'Editor' || 'Viewer'"

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 10s
    labels:
      release: prometheus

# Sidecar configuration
sidecar:
  dashboards:
    enabled: true
    label: grafana_dashboard
    searchNamespace: ALL
  datasources:
    enabled: true
    label: grafana_datasource
    searchNamespace: ALL