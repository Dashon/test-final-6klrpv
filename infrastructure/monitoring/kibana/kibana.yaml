apiVersion: v1
kind: List
items:
# Kibana ConfigMap with enhanced security and monitoring configuration
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: kibana-config
    namespace: monitoring
    labels:
      app: kibana
      component: visualization
  data:
    kibana.yml: |
      server.name: ai-travel-platform-kibana
      server.host: "0.0.0.0"
      server.port: 5601
      
      # Elasticsearch Connection
      elasticsearch.hosts: ["http://elasticsearch:9200"]
      elasticsearch.requestTimeout: 30000
      elasticsearch.shardTimeout: 30000
      
      # Monitoring Configuration
      monitoring.ui.container.elasticsearch.enabled: true
      xpack.monitoring.enabled: true
      xpack.monitoring.collection.enabled: true
      
      # Security Features
      xpack.security.enabled: true
      xpack.security.audit.enabled: true
      
      # Reporting Configuration
      xpack.reporting.enabled: true
      xpack.reporting.capture.maxAttempts: 3
      
      # Logging Configuration
      logging.appenders.file.enabled: true
      logging.appenders.file.layout.type: json

# Kibana Deployment with high availability configuration
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: kibana
    namespace: monitoring
    labels:
      app: kibana
      component: visualization
  spec:
    replicas: 2
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
    selector:
      matchLabels:
        app: kibana
    template:
      metadata:
        labels:
          app: kibana
          component: visualization
      spec:
        containers:
        - name: kibana
          # Kibana container image version 8.7.x as specified in globals
          image: docker.elastic.co/kibana/kibana:8.7.x
          ports:
          - containerPort: 5601
            name: http
            protocol: TCP
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
          volumeMounts:
          - name: config
            mountPath: /usr/share/kibana/config/kibana.yml
            subPath: kibana.yml
          env:
          - name: ELASTICSEARCH_HOSTS
            value: "http://$(ELASTICSEARCH_HOST):$(ELASTICSEARCH_PORT)"
          livenessProbe:
            httpGet:
              path: /api/status
              port: 5601
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/status
              port: 5601
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
        volumes:
        - name: config
          configMap:
            name: kibana-config

# Kibana Service for internal access
- apiVersion: v1
  kind: Service
  metadata:
    name: kibana
    namespace: monitoring
    labels:
      app: kibana
      component: visualization
  spec:
    type: ClusterIP
    ports:
    - name: http
      port: 5601
      targetPort: 5601
      protocol: TCP
    selector:
      app: kibana
    sessionAffinity: ClientIP

# Kibana Ingress with SSL configuration
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: kibana
    namespace: monitoring
    labels:
      app: kibana
      component: visualization
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
      cert-manager.io/cluster-issuer: letsencrypt-prod
  spec:
    rules:
    - host: kibana.monitoring.ai-travel-platform.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: kibana
              port:
                number: 5601
    tls:
    - hosts:
      - kibana.monitoring.ai-travel-platform.com
      secretName: kibana-tls