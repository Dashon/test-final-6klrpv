apiVersion: apps/v1
kind: Deployment
metadata:
  name: persona-service
  namespace: default
  labels:
    app: ai-travel-platform
    component: persona-service
    version: "1.0.0"
  annotations:
    description: "AI Persona Service for managing ML-powered travel personas"
    maintainer: "platform-team@company.com"
spec:
  # High availability with 3 replicas
  replicas: 3
  # Zero-downtime deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ai-travel-platform
      component: persona-service
  template:
    metadata:
      labels:
        app: ai-travel-platform
        component: persona-service
      annotations:
        # Prometheus metrics scraping configuration
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        # Config checksum for automatic pod updates on config changes
        checksum/config: "${CONFIG_CHECKSUM}"
        # Security policy version tracking
        security.policy/version: "v1"
    spec:
      # Service account for RBAC
      serviceAccountName: persona-service-sa
      # Pod distribution and ML workload placement rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: ml-workload
                    operator: In
                    values: ["true"]
      containers:
        - name: persona-service
          image: ai-travel-platform/persona-service:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http
            - containerPort: 9090
              name: metrics
          # Resource allocation for ML workloads
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          # Health checking configuration
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          startupProbe:
            httpGet:
              path: /health
              port: http
            failureThreshold: 30
            periodSeconds: 10
          # Environment configuration from ConfigMap
          envFrom:
            - configMapRef:
                name: ai-travel-platform-config
          # Volume mounts for ML models and temporary storage
          volumeMounts:
            - name: ml-models
              mountPath: /app/models
            - name: tmp
              mountPath: /tmp
          # Container security context
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            readOnlyRootFilesystem: true
      # Pod volumes configuration
      volumes:
        - name: ml-models
          persistentVolumeClaim:
            claimName: ml-models-pvc
        - name: tmp
          emptyDir: {}
      # Pod security context
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      # Grace period for proper shutdown
      terminationGracePeriodSeconds: 60