apiVersion: v1
kind: Service
metadata:
  name: booking-service
  namespace: ai-travel-platform
  labels:
    app: ai-travel-platform
    component: booking-service
    environment: production
  annotations:
    # Monitoring configuration
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    
    # Regional topology configuration
    topology.kubernetes.io/region: "${AWS_REGION}"
    topology.kubernetes.io/zone: "${AWS_ZONE}"
    
    # AWS Load Balancer configuration
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"

spec:
  # Using ClusterIP for internal service mesh communication
  type: ClusterIP
  
  # Service ports configuration
  ports:
    - name: http
      port: 80
      targetPort: 3000
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
    - name: health
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: management
      port: 8081
      targetPort: 8081
      protocol: TCP
  
  # Selector matching deployment labels
  selector:
    app: ai-travel-platform
    component: booking-service
  
  # Session affinity configuration for consistent routing
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hour timeout
  
  # Topology aware routing configuration
  topologyKeys:
    - "topology.kubernetes.io/zone"
    - "topology.kubernetes.io/region"
    - "*"