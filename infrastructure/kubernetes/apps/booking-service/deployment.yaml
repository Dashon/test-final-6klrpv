apiVersion: apps/v1
kind: Deployment
metadata:
  name: booking-service
  namespace: ai-travel-platform
  labels:
    app: ai-travel-platform
    component: booking-service
  annotations:
    # Monitoring annotations
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    # Logging annotations
    fluentbit.io/parser: "json"
    # Service mesh injection
    linkerd.io/inject: "enabled"

spec:
  # High availability with 3 replicas
  replicas: 3
  
  # Zero-downtime deployment strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
      
  selector:
    matchLabels:
      app: ai-travel-platform
      component: booking-service
      
  template:
    metadata:
      labels:
        app: ai-travel-platform
        component: booking-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        checksum/config: "${CONFIG_CHECKSUM}"
        
    spec:
      # Service account for RBAC
      serviceAccountName: booking-service-sa
      
      containers:
      - name: booking-service
        image: ai-travel-platform/booking-service:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
          
        # Resource limits and requests
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
          
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 30
          
        # Environment configuration
        envFrom:
        - configMapRef:
            name: ai-travel-platform-config
            
        # Volume mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: booking-data
          mountPath: /data
          
        # Container security context
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            
      # Volumes configuration
      volumes:
      - name: tmp
        emptyDir: {}
      - name: booking-data
        persistentVolumeClaim:
          claimName: booking-data-pvc
          
      # Pod security context
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
          
      # Pod anti-affinity for high availability
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: ai-travel-platform
                  component: booking-service
              topologyKey: kubernetes.io/hostname
              
      # Topology spread constraints for zone distribution
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: ai-travel-platform
            component: booking-service