apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: ai-travel-platform
  labels:
    app: ai-travel-platform
    component: api-gateway
    tier: frontend
    security-zone: dmz
  annotations:
    # Prometheus monitoring configuration
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    
    # AWS Load Balancer configurations
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "false"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "${SSL_CERT_ARN}"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443,8444"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "60"
    
    # Security annotations
    security.alpha.kubernetes.io/allowedIPs: "0.0.0.0/0"  # Restrict as needed
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Environment=production,Component=api-gateway"
    
    # Documentation
    service.kubernetes.io/description: "Kong API Gateway service exposing HTTP/HTTPS endpoints and admin interfaces"
    maintainer: "platform-team@company.com"

spec:
  type: LoadBalancer
  # Port configurations matching deployment container ports
  ports:
    - name: http
      port: 80
      targetPort: 8000
      protocol: TCP
    - name: https
      port: 443
      targetPort: 8443
      protocol: TCP
    - name: admin
      port: 8001
      targetPort: 8001
      protocol: TCP
    - name: admin-ssl
      port: 8444
      targetPort: 8444
      protocol: TCP
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP

  # Selector matching deployment pod labels
  selector:
    app: ai-travel-platform
    component: api-gateway
    tier: frontend

  # Session affinity for consistent routing
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours

  # External traffic policy for preserving client source IPs
  externalTrafficPolicy: Local

  # Health check configuration
  healthCheckNodePort: 32000

  # Load balancer source ranges (customize based on security requirements)
  loadBalancerSourceRanges:
    - 0.0.0.0/0  # Restrict to specific IP ranges in production

  # IP family policy for dual-stack support
  ipFamilyPolicy: PreferDualStack
  ipFamilies:
    - IPv4
    - IPv6